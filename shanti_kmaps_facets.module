<?php
/**
* @file
* Kmaps Facets: a block Module for displaying a Kmaps Navigator
 * Enhanced version (2.x) is based on 1.0 but uses Kmap Navigator and tree code
*/

define('HBTEMP', 'shanti_kmaps_facets_hbtemplate');

function shanti_kmaps_facets_help($path, $arg) {
    switch ($path) {
        case "admin/helpshanti_kmaps_facets":
            return '<p>' . t("Kmaps Search and Navigation:  So Helpful!") . '</p>';
            break;
    }
}

function shanti_kmaps_facets_menu() {
    $items = array(); 
    // Kmaps Facets Settings form defaults to display tab
    $items['admin/config/user-interface/shanti_kmaps_facets'] = array(
        'title' => 'Kmaps Facets Settings',
        'type' => MENU_NORMAL_ITEM, 
        'description' => 'Configure Kmaps Facets Module',
        'access arguments' => array('administer site configuration'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('shanti_kmaps_facets_settings_admin'),
        'access arguments' => array('administer site configuration'),
       
    );
    // Display Tab for first settings page
    $items['admin/config/user-interface/shanti_kmaps_facets/admin'] = array(
        'title' => 'Admin',
        'type' => MENU_DEFAULT_LOCAL_TASK, 
        'weight' => -20,
    );
    // Behavior Tab of Settings
    $items['admin/config/user-interface/shanti_kmaps_facets/display'] = array(
        'title' => 'Display',
        'type' => MENU_LOCAL_TASK, 
        'page callback' => 'drupal_get_form',
        'page arguments' => array('shanti_kmaps_facets_settings_display'),
        'access arguments' => array('administer site configuration'),
        'weight' => -15,
    );
    
    // Behavior Tab of Settings
    $items['admin/config/user-interface/shanti_kmaps_facets/behavior'] = array(
        'title' => 'Behavior',
        'type' => MENU_LOCAL_TASK, 
        'page callback' => 'drupal_get_form',
        'page arguments' => array('shanti_kmaps_facets_settings_behavior'),
        'access arguments' => array('administer site configuration'),
        'weight' => -10,
    );

    // Path for the kmap tree by block
    $items['kmaps/facettree/block/%'] = array(
        'title' => '',
        'description' => 'Return data for a block tree',
        'page callback' => 'shanti_kmaps_facets_block_tree',
        'page arguments' => array(3),
        'access arguments' => array('access content'),
    );
    // Path to display items in site tagged with a particular kmap. Requires shanti_kmaps_fields
    if (module_exists('shanti_kmaps_fields')) {
        $items['kmaps/facets/%/%'] = array(
            'title' => '',
            'description' => 'Kmap Facet Search',
            'page callback' => 'shanti_kmaps_facets_gallery',
            'page arguments' => array(2, 3),
            'access arguments' => array('access content'),
        );
    }
    
    // Path to show list of results from kmaps index
    $items['kmaps/%/%'] = array(
        'title' => '',
        'description' => 'Kmap Resource Search',
        'page callback' => 'kmaps_item_list',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
    );
    return $items;
}
/**
 * Kmaps Facets Admin Settings Form
 * Default page
 */
function shanti_kmaps_facets_settings_admin(array $form, array &$form_state) {
    $form = array();
    $form['shanti_kmaps_facets_block_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of Kmap Facet Blocks'),
        '#default_value' => variable_get('shanti_kmaps_facets_block_count', 2),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t("The number of Kmap facet blocks to have on this site"),
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

/**
 * Kmaps Facets Display Settings Form
 * Get variable by $km_block_ct = variable_get("shanti_kmaps_facets_block_count", 2);
 */
function shanti_kmaps_facets_settings_display(array $form, array &$form_state) {
    $form = array();
    
    $form[HBTEMP] = array(
        '#type' => 'textfield',
        '#title' => t('Location of Handlebar Template for Tree nodes'),
        '#default_value' => variable_get(HBTEMP, drupal_get_path('module', 'shanti_kmaps_facets') . 
                '/templates/shanti_kmaps_facets_treenode.hbt'),
        '#size' => 100,
        '#description' => t("The location of the Handlebars template to use for displaying the tree nodes."),
        '#required' => TRUE,
    );
    
    $form['shanti_kmaps_facets_show_counts'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show resource counts next to nodes'),
        '#default_value' => variable_get('shanti_kmaps_facets_show_counts', TRUE),
        '#description' => t("Show the number of resources in a particular category next to the tree node"),
    );
    
    $form['shanti_kmaps_facets_hide_zeros'] = array(
        '#type' => 'checkbox',
        '#title' => t('Hide nodes with no resources'),
        '#default_value' =>  variable_get('shanti_kmaps_facets_hide_zeros', FALSE),
        '#description' => t("Hide nodes with no associated resources"),
    );
    
    $form['shanti_kmaps_facets_resource_types'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Resource types to count'),
        '#description' => t("Select which resource types you want to reflect in the counts"),
        '#default_value' => variable_get('shanti_kmaps_facets_resource_types', array()),
        '#options' => drupal_map_assoc(array('audio-video', 'photos', 'sources', 'texts', 'visuals')),
    );
    
    return system_settings_form($form);
}


/**
 * Kmaps Facets Display Behavior Form
 * Used to enter link syntax for clicks on nodes and AJAX settings
 */
function shanti_kmaps_facets_settings_behavior(array $form, array &$form_state) {
    $form = array();
    $form['shanti_kmaps_facets_link_syntax'] = array(
        '#type' => 'textfield',
        '#title' => t('Kmap Node Link Syntax'),
        '#default_value' => variable_get('shanti_kmaps_facets_link_syntax', ""),
        '#size' => 120,
        '#maxlength' => 512,
        '#description' => t("Enter a relative link for clicks on kmap items. Use \"__DOMAIN__\" for the kmaps domain (subject, places) and \"__ID__\" to indicate where the relevant Kmap ID will fit into the url"),
        '#required' => TRUE,
    );
    
    $form['shanti_kmaps_facets_ajax'] = array(
        '#type' => 'checkbox',
        '#title' => t('Load Links via AJAX'),
        '#default_value' => variable_get('shanti_kmaps_facets_show_counts', TRUE),
        '#description' => t("Click this box to enable AJAX loading of pages"),
    );
    
    return system_settings_form($form);
}

/**
 * Validate module settings, block number must be an integer and >= 1
 */
function shanti_kmaps_facets_settings_validate($form, &$form_state) {
    $blockct = $form_state['values']['shanti_kmaps_facets_block_count' ];
    if (!is_numeric($blockct)) {
        form_set_error('shanti_kmaps_facets_block_count', t('You must enter an integer for the number of Kmap facet blocks.'));
    }
    elseif ($blockct <= 0) {
        form_set_error('shanti_kmaps_facets_block_count', t('Maximum number of blocks must be at least 1.'));
    }
}
    
/**
 * Implements hook_block_info().
 */
function shanti_kmaps_facets_block_info() {
    $blocks = array();
    for ($i = 1; $i <= variable_get("shanti_kmaps_facets_block_count", 2); $i++) {
        $blocks[$i]['info'] = variable_get('shanti_kmaps_facets_block_name_' . $i, 'Kmaps Facets Block ' . $i);
        // We have too many things changing per user, per page to cache.
        $blocks[$i]['cache'] = DRUPAL_NO_CACHE;
    }
    return $blocks;
}

/**
 *  Implements hook_block_configure($delta)
 *  Creates configure form for each kmap nav block
 */

function shanti_kmaps_facets_block_configure($delta = 1) {
    
    $form['shanti_kmaps_facets_block_delta'] = array(
        '#type' => 'hidden',
        '#value' => $delta,
    );
    // Block Name
    $form['shanti_kmaps_facets_block_name_' . $delta] = array(
        '#type' => 'textfield',
        '#title' => t('Block name'),
        '#default_value' => variable_get('shanti_kmaps_facets_block_name_' . $delta, 'Kmaps Facet Block ' . $delta),
    );
    // Block Type: Places or Subjects
    $form['shanti_kmaps_facets_block_type_' . $delta] = array(
        '#type' => 'select',
        '#title' => t('Kmap Tree Type'),
        '#description' => t('Type of Kmap Navigator Tree to Show in Block'),
        '#default_value' => variable_get('shanti_kmaps_facets_block_type_' . $delta, 'places'),
        '#options' => drupal_map_assoc(array('places', 'subjects')),
    );
    // Root Kmap Id for Block (TODO: needs validation?)
    $form['shanti_kmaps_facets_block_root_' . $delta] = array(
        '#type' => 'textfield',
        '#title' => t('Kmap Root Node'),
        '#description' => t('Enter the KMap ID for the Root Node of the nav-tree in this block'),
        '#default_value' => variable_get('shanti_kmaps_facets_block_root_' . $delta, FALSE),
    );
    // The Kmap Field on this site it displays.
    $form['shanti_kmaps_facets_block_field_' . $delta] = array(
        '#type' => 'select',
        '#title' => t('Kmaps Facet Field'),
        '#description' => t('Choose which Drupal Kmaps field to display counts for'),
        '#options' =>shanti_kmaps_facets_get_kmap_field_list(),
        '#default_value' => variable_get('shanti_kmaps_facets_block_field_' . $delta, FALSE),
    ); 
    
    return $form;
}

/**
 * Get list of kmap fields used on this site
 */
function shanti_kmaps_facets_get_kmap_field_list() {
	$finfo = field_info_field_map();
	$kmfields = array();
	foreach($finfo as $fnm => $fstats) {
	  if($fstats['type'] == 'shanti_kmaps_fields_default') {
			$types = array();
			foreach ($fstats['bundles']['node'] as $ctype) {
				$types[] = $ctype;
			}
			$kmfields[$fnm] = "$fnm (" . implode(', ', $types) . ")";
	  }
	}
	return $kmfields;
}


/**
 * Block admin form alter to add validation for kmap facet block settings form
 */
function shanti_kmaps_facets_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
    if ($form['module']['#value'] == 'shanti_kmaps_facets') {
        $form['#validate'][] = 'shanti_kmaps_facets_block_validate';
    }
}

/**
 * Function to validate kmap facet block settings to make sure kmaps root id either FALSE or a positive integer
 */
function shanti_kmaps_facets_block_validate(&$form, $form_state) {
	// TODO: VALIDATE: Add check with kmaps server to make sure root id is a valid kmap id for that type.
	if (isset($form_state['values']['shanti_kmaps_facets_block_delta'])) {
		$delta = $form_state['values']['shanti_kmaps_facets_block_delta'];
		$root = $form_state['values']["shanti_kmaps_facets_block_root_{$delta}"];
		if ($root && $root != "") {
			if (is_numeric($root)) {
				$root = $root * 1;
				if ($root < 1) {
					form_set_error("shanti_kmaps_facets_block_root_{$delta}", t('The root KMap Id must be a positive integer'));
				}
			} else {
					form_set_error("shanti_kmaps_facets_block_root_{$delta}", t('The root KMap Id must be an integer'));
			}
		}
	} 
}

/**
 * Implements hook_block_save().
 * Save individual block settings as variables
 */
function shanti_kmaps_facets_block_save($delta, $edit) {
    variable_set('shanti_kmaps_facets_block_name_' . $delta, $edit['shanti_kmaps_facets_block_name_' . $delta]);
    variable_set('shanti_kmaps_facets_block_type_' . $delta, $edit['shanti_kmaps_facets_block_type_' . $delta]);
    if ($edit['shanti_kmaps_facets_block_root_' . $delta] == "") { $edit['shanti_kmaps_facets_block_root_' . $delta] = FALSE; }
    variable_set('shanti_kmaps_facets_block_root_' . $delta, $edit['shanti_kmaps_facets_block_root_' . $delta]);
    variable_set('shanti_kmaps_facets_block_field_' . $delta, $edit['shanti_kmaps_facets_block_field_' . $delta]);
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function shanti_kmaps_facets_block_view($delta = 1) {
     global $base_url, $base_path;

    kmfacets_libraries_load('json2');
    kmfacets_libraries_load('fancytree','source');
    kmfacets_libraries_load('ajaxsolr');
    kmfacets_libraries_load('shanti_kmaps_tree');
    kmfacets_libraries_load('shanti_kmaps_typeahead');

   /* drupal_add_css(drupal_get_path('module', 'kmaps_navigator') . "/stylesheets/kmaps_navigator.css",array(
        'group' => JS_THEME,
    ));*/
    drupal_add_js(array(
        'shanti_kmaps_facets' => array(
            'hbtemplate' => variable_get(HBTEMP, drupal_get_path('module', 'shanti_kmaps_facets') . '/templates/shanti_kmaps_facets_treenode.hbt'),
            'resource_types' =>shanti_kmaps_facets_get_selected_resource_types(),
            'show_counts' => variable_get('shanti_kmaps_facets_show_counts', TRUE),
            'hide_zeros' => variable_get('shanti_kmaps_facets_hide_zeros', FALSE),
            'link_syntax' => variable_get('shanti_kmaps_facets_link_syntax', FALSE),
            'use_ajax' => variable_get('shanti_kmaps_facets_ajax', FALSE),
        )
    ), 'setting');
    drupal_add_js(drupal_get_path('module', 'shanti_kmaps_facets') . "/js/shanti_kmaps_facets.js",array(
        'group' => JS_THEME,
    ));
    
    //Add Ajax library
    drupal_add_library('system', 'drupal.ajax');
    $kmtype = variable_get('shanti_kmaps_facets_block_type_' . $delta, 'places');
    $kmroot = variable_get('shanti_kmaps_facets_block_root_' . $delta, FALSE);
    $block = array(
        'subject' => '',
        'content' => theme('shanti_kmaps_facets_block', array(
            'delta' => $delta,
            'kmtype' => $kmtype,
            'kmroot' => $kmroot,
            'treeurl' => 'null', // maybe unnecessary leftover from previous version
        )),
    );
    return $block;
}

/**
 *  Implements hook_get_selected_resource_types, defined in kmaps_views but also used here for tree display
 * 
 *  Get selected resource types in SOLR query syntax
 *    Gets all the array values from the admin form settings for shanti_kmaps_facets_resource_types'. Values are e.g. "audio-video" if selected of "0" if not selected.
 *    Then gets unique values to remove duplicate "0" values
 *    Then filters out "0" value using array_diff with an array('0')
 *    Finally returns comma-delimited string of remaining (selected) values
 */
function shanti_kmaps_facets_get_selected_resource_types() {
    $resource_types = array_values(variable_get('shanti_kmaps_facets_resource_types', array('all')));
    $resource_types = array_unique($resource_types);
    $resource_types = array_diff($resource_types, array('0')); // remove the 0 (not chosen) value
    return implode(",", $resource_types);
}

/**
 * Extending Libraries libraries_load function to catch when library is not loaded and provide a message (Libraries module should do this but doesn't).
 */
function kmfacets_libraries_load($a, $b=NULL) {
    $res = libraries_load($a, $b);
    if (!$res['loaded']) {
        drupal_set_message(t("The library @libname could not be loaded: @errmsg", array('@libname' => $a, '@errmsg' => strip_tags($res['error message']))));
    }
}

/**
 * Implements hook_theme()
 *
 */
function shanti_kmaps_facets_theme() {
    $ret = array(
        'shanti_kmaps_facets_block' => array(
             'path' => drupal_get_path('module', 'shanti_kmaps_facets') . "/templates",
             'template' => 'shanti_kmaps_facets_block',
              'variables' => array(
                 'delta' => NULL, 
                 'kmtype' => NULL, 
                 'kmroot' => NULL,
                 'treeurl' => NULL,
              ),
              '#attached' => array(
                    'libraries_load' => array(
                        array(
                            'fancytree'
                        ),
                        array(
                            'ajaxsolr'
                        ),
                        array(
                            'typeahead'
                        ),
                        array(
                            'shanti_kmaps_typeahead'
                        ),
                    ),
                    'library' => array(
                        'system', 'drupal.ajax'
                    ),
                )
           )
    );
    
    return $ret;
}

/**
 * Returns data for the tree in each block
 *      Checks cache for json definition of kmaps tree for each block ($delta). If not found, then calls subjectproxy.php to query the kmaps site
 *      designated by Shanti Kmaps Admin and get JSON def for subject tree, which is then save to cache. In either case, JSON for the tree is output
 *      to the browser.
 */
 function shanti_kmaps_facets_block_tree($delta) {
     global $base_url;
     $cache_name = "kmaps_facet_tree_block_{$delta}";
     if ($cache = cache_get($cache_name)) {
         drupal_json_output(json_decode($cache->data));
     } else {
         $km_type = variable_get('shanti_kmaps_facets_block_type_' . $delta, 'places');
         $km_root = variable_get('shanti_kmaps_facets_block_root_' . $delta, FALSE);
         $admin_vars = shanti_kmaps_admin_get_vars();
         $server = $admin_vars['shanti_kmaps_admin_server_' . $km_type];
         if ($km_root != '') { $km_root .= '/'; }
         $dataurl = $server . "/features/" . $km_root . "fancy_nested.json";
         if ($km_type == 'subjects' && $km_root == '') {
             $dataurl = $base_url . '/' . drupal_get_path('module', 'shanti_kmaps_facets') .  '/subjectproxy.php?server=' . $server;
         }
         $json_data = file_get_contents($dataurl);
         cache_set($cache_name, $json_data, 'cache');
         drupal_json_output(json_decode($json_data));
     }
 }

/**
 * New Search Flyout Preprocess used with Shanti_Kmap_facets 
 * When used with a Shanti Sarvaka based theme in the search flyout region, 
 * this sets up the proper code for use with the fancy tree JS library.
function shanti_kmaps_facets_preprocess_region(&$vars) {
	if($vars['region'] == 'search_flyout') {
		// For search flyout in mediabase, sniff out facet api blocks so that they can be placed in tabs
		$elements = $vars['elements'];
		$children = element_children($elements);
		$facets_done = FALSE;
		$facetmu = '<div class="tab-content">';
		$facettabs = '<section class="view-section"><ul class="nav nav-tabs">'; 
		$fct = 0;
		foreach($children as $ename) {
			if(strpos($ename, shanti_kmaps_facets') > -1) {
				$el = $elements[$ename];
				$flabel = $el['#block']->title;
				$fct++;
				$srflabel = str_replace('_', '-', $ename);
				$active = ($fct == 1) ? " active":"";
				$bcnt = $el['#markup'];
				$facetmu .= "<div class=\"km-facet-div {$srflabel} treeview tab-pane{$active}\">{$bcnt}</div>";
				$facettabs .= "<li class=\"km-facet-tab {$srflabel}{$active}\"><a href=\".{$srflabel}\" data-toggle=\"tab\">" . 
												"{$flabel}</a></li>";
			} 
		}
		$facetmu .= '</div>';
		$facettabs .= '</ul>';
		$facetmu = $facettabs . $facetmu . '</section>';  
		$vars['facetcnt'] = $facetmu;
	}
}
 */

/**
 * Creates an array of all kmap data for given block by delta on kmap id with each id having an array of nodes tagged with it
 */
function shanti_kmaps_facets_facet_info($delta, $tally_ancestors = TRUE) {
	$field_name =  variable_get('shanti_kmaps_facets_block_field_' . $delta, FALSE);
	$kmapres = array();
	if ($field_name) { 
		$tbl = 'field_data_' . $field_name;
		$col = $field_name . '_id';
		$raw = $field_name . '_raw';
		
		$q = db_select($tbl, 't')->fields('t'); //, array('entity_id', $col)
		$filters = _kmaps_facets_get_filter_info();
		$active_facet = 0;
		if (isset($filters[$delta]) && is_array($filters[$delta])) {
			foreach($filters[$delta] as $kid) {
				$q->condition($field_name . '_raw', "%<{$kid}>%", "LIKE");
				$active_facet = $kid;
			}
		}
		drupal_add_js(array('shanti_kmaps_facets' => array('facet_info' => array("block-$delta" => $active_facet))), 'setting');
		$res = $q->execute();
		$alltags = $res->fetchAll();
		
		foreach ($alltags as $tinfo) {
			if ($tally_ancestors) {
				$anc = shanti_kmaps_fields_parse_raw($tinfo->{$raw});
				$nid = $tinfo->entity_id;
				foreach ($anc as $kid) { 
					$kmapres[$kid][] = $nid;
				}
			} else {
				$nid = $tinfo->entity_id;
				$kid = $tinfo->{$col};
				$kmapres[$kid][] = $nid;
			}
		}
		foreach ($kmapres as $key => $karray) {
			$univals = array_unique($karray);
			$kmapres[$key] = array_values($univals);
		}
	} else {
		watchdog('shanti_kmaps_facets', "Kmaps Facet Block $delta does not have a field associated with it. Cannot show tree!");
	}
	return $kmapres;
}

/**
 * Get filter info from the url
 */
function _kmaps_facets_get_filter_info() {
	$mypath = current_path();
	$fctstr = str_replace('kmaps/facets/', '', $mypath);
	$fctpts = explode('/', $fctstr);
	$facets = array();
	for($n = 0; $n < count($fctpts) - 1; $n += 2) {
		$bn = $fctpts[$n];
		$kid = $fctpts[$n+1];
		if (isset($facets[$bn])) {
			$facets[$bn][] = $kid;
		} else {
			$facets[$bn] = array($kid);
		}
	}
	return $facets;
} 
 
/**
 * Display a page of facet results
 * @param $delta int
 * 	The delta number of the block from which the facet came
 * 
 * @param $kid int
 * 	The kmap id for the facet being displayed.
 */
function shanti_kmaps_facets_gallery($delta, $kid) {
	// Get Block & Kmap Info
	module_load_include('inc', 'shanti_kmaps_fields', 'shanti_kmaps_fields.kmaps_api');
	$block = block_load('shanti_kmaps_facets', $delta);
	$km_domain = variable_get('shanti_kmaps_facets_block_type_' . $delta, FALSE);
	$km_field =  variable_get('shanti_kmaps_facets_block_field_' . $delta, FALSE);
	$km_title = shanti_kmaps_fields_get_title_by_id($km_domain, $kid);
	
	if ($km_field) {
		// Do the database query on that field for unique nodes
		$tbl = 'field_data_' . $km_field;
		$field = $km_field . "_raw";
		$kpath = $km_field . "_path";
		$kidst = "%<{$kid}>%";
		$query = db_select($tbl, 't')
			->fields('t', array('entity_id'))->condition($field, $kidst, 'LIKE')
			->distinct();
		$allrows = $query->execute();
		$count = $allrows->rowCount();
		$query = db_select($tbl, 't')->extend('PagerDefault')->element(0)
			->fields('t', array('entity_id'))->condition($field, $kidst, 'LIKE')->distinct()->limit(30);
		$rows = $query->execute();
		// Create the page build
		$facets = array(); // START
		drupal_set_title($block->title . ": " . $km_title);
		$build['initdesc'] = array('#markup' => t('<p>@count items are tagged with @kmaptype, "@kmaptitle":</p>',
				array('@count' => $count, '@kmaptype' => $block->title, '@kmaptitle' => $km_title)));
		$gallery = '<ul class="shanti-gallery">';
		foreach($rows as $row) {
			//if (!$ancestors && isset($row->{$kpath})) { $ancestors = $row->{$kpath}; }
			$nid = $row->entity_id;
			$node = node_load($nid);
			$gallery .= render(node_view($node,'teaser'));
		}
		$gallery .= '</ul>';
		$build['gallery'] = array('#markup' => $gallery);
		
		// Add pager to build using the sites core override preset pager
		$build['pagerer_mini_0'] = array(
	    '#theme' => 'pagerer',
	    '#preset' => _pagerer_get_variable('core_override_preset'),
	    '#element' => 0,
	  );
		return $build;
	} else {
		// If no field associated with designated block, send warning and page not found
		drupal_set_message("Sorry, something went wrong with the Kmaps Facet search. Please check the URL.", "warning");
		drupal_not_found();
	}
}

function shanti_kmaps_facets_process_facets(&$facets, $node, $km_field) {
	$fi = field_get_items('node', $node, $km_field);
	$nid = $node->nid;
	foreach ($fi as $n => $item) {
		$ancestors = shanti_kmaps_fields_parse_raw($item['raw']);
		foreach ($ancestors as $n => $kid) {
			if (is_array($facets[$kid])) {
				$facets[$kid][] = $nid;
			} else {
				$facets[$kid] = array($nid);
			}
		}
	}
	foreach ($facets as $kid => $karray) {
		$facets[$kid] = array_unique($karray);
	}
}

/**
 *  A test function to produce a list of kmaps for an ajax call fromshanti_kmaps_facets.js
 */
function kmaps_item_list($domain, $kmid) {
    $restypes = str_replace(',', '%20OR%20',shanti_kmaps_facets_get_selected_resource_types());
    $url = "http://kidx.shanti.virginia.edu/solr/kmindex-dev/select?q=kmapid:{$domain}-{$kmid}%20AND%20asset_type:({$restypes})&rows=30&wt=json";
    $res = file_get_contents($url);
    $jsondata = json_decode($res, TRUE);
    $out = '<div>';
    foreach($jsondata['response']['docs'] as $doc) {
        $out .= '<p><a href="' . $doc['url_html'] . '" target="_blank">' . $doc['caption'] . '</a> (' . $doc['asset_type'] . '-' . $doc['id'] . ')</p>';
    }
    if($jsondata['response']['numFound'] == 0) {
        $out .= '<p>No results found.</p>';
    }
    $out .= '</div>';
    print $out;
}
